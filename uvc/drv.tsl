import <class.tsl>
import <dev.tsl>

template uvc_linux_drv(uvc_webcam dev, uvc_os os)

derive uvc_drv;

task uncontrollable void probe(){
    ...;
    assert(dev.usb_dev_config == configuration1);
};

//configuration
task uncontrollable void configure_brightness(uint<16> brightness) {
    req_brightness = brightness;
    ...;
};

task uncontrollable void configure_contrast(uint<16> contrast) {
    req_contrast = contrast;
    ...;
};

task uncontrollable void configure_hue(uint<16> hue) {
    req_hue = hue;
    ...;
};

task uncontrollable void configure_saturation(uint<16> saturation) {
    req_saturation = saturation;
    ...;
};

task uncontrollable void configure_sharpness(uint<16> sharpness) {
    req_sharpness = sharpness;
    ...;
};

task uncontrollable void configure_gamma(uint<16> gamma) {
    req_gamma = gamma;
    ...;
};

task uncontrollable void configure_power_mode(uint<8> power_mode) {
    req_power_mode = power_mode;
    ...;
};

task uncontrollable void configure_white_balance_temperature(uint<16> val){
    req_white_balance_temperature = val;
    ...;
};

task uncontrollable void configure_backlight_compensation(uint<16> val){
    req_backlight_compensation = val;
    ...;
};

task uncontrollable void configure_power_line_frequency(uint<8> val){
    req_power_line_frequency = val;
    ...;
};

task uncontrollable void configure_white_balance_temperature_auto(uint<8> val){
    req_white_balance_temperature_auto = val;
    ...;
};

//streaming
task uncontrollable void start_streaming(uint<8> formatIndex, uint<8> frameIndex, uint<32> frameInterval) {
    reqFormatIndex   = formatIndex;
    reqFrameIndex    = frameIndex;
    reqFrameInterval = frameInterval;
    
    uint<208> buffer;
    dev.control_transfer(5'h1 ++ 2'h1 ++ 1'h1, 8'h83, 16'h100, 16'h1, /* any value */16'd26, /* any value */208'h0, buffer);
    dev.control_transfer(5'h1 ++ 2'h1 ++ 1'h0, 8'h1, 8'h0 ++ 8'h2, 8'h1 ++ 8'h0, 16'd26, /*any value*/16'h0 ++ reqFormatIndex ++ reqFrameIndex ++ reqFrameInterval ++ buffer[64:79] ++ buffer[80:95] ++ buffer[96:111] ++ buffer[112:127] ++ buffer[128:143] ++ buffer[144:175] ++ buffer[176:207], _);
    dev.control_transfer(5'h1 ++ 2'h1 ++ 1'h1, 8'h81, 16'h100, 16'h1, /* any value */16'd26, /* any value */208'h0, _);
    dev.set_interface_alt_setting(16'h1, 16'h1);
    {};
};

task uncontrollable void stop_streaming() {
    ...;
};

task uncontrollable void packet_received(uint<32> size) {
    ...;
};

endtemplate
